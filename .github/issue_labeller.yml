name: Label Release Items

on:
  release:
    types: [published]

jobs:
  label-release-items:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to access git history

      - name: Get previous tag
        id: previous-tag
        run: |
          CURRENT_TAG=${{ github.ref_name }}
          # Get the previous tag (sorted by version)
          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | awk 'NR==1 {found=0} $0 == "'$CURRENT_TAG'" {found=1} found && $0 != "'$CURRENT_TAG'" {print; exit}')
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Get merged PRs and linked issues
        id: get-items
        uses: actions/github-script@v6
        env:
          CURRENT_TAG: ${{ github.ref_name }}
          PREVIOUS_TAG: ${{ steps.previous-tag.outputs.previous_tag }}
          LABEL_NAME: "Released in ${{ github.ref_name }}"
        with:
          script: |
            const { owner, repo } = context.repo;
            const labelName = process.env.LABEL_NAME;
            const currentTag = process.env.CURRENT_TAG;
            const previousTag = process.env.PREVIOUS_TAG;

            // Create or get the label
            try {
              await github.rest.issues.getLabel({ owner, repo, name: labelName });
            } catch (error) {
              if (error.status === 404) {
                await github.rest.issues.createLabel({
                  owner,
                  repo,
                  name: labelName,
                  color: '1E90FF', // Dodger Blue
                  description: 'Issues/PRs included in release ' + currentTag
                });
              }
            }

            // Get compare between tags
            const compare = await github.rest.repos.compareCommits({
              owner,
              repo,
              base: previousTag || '', // Handle first release
              head: currentTag
            });

            // Collect PRs and issues
            const prNumbers = new Set();
            const issueNumbers = new Set();

            for (const commit of compare.data.commits) {
              // Get PRs associated with commit
              const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner,
                repo,
                commit_sha: commit.sha
              });
              for (const pr of prs.data) {
                if (pr.merged_at && !prNumbers.has(pr.number)) {
                  prNumbers.add(pr.number);

                  // Get linked issues from PR body
                  const prData = await github.rest.pulls.get({
                    owner,
                    repo,
                    pull_number: pr.number
                  });
                  const body = prData.data.body || '';
                  const closingMatches = body.match(/(close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\s+#(\d+)/gi) || [];
                  closingMatches.forEach(match => {
                    const issueNumber = match.match(/#(\d+)/)[1];
                    issueNumbers.add(Number(issueNumber));
                  });
                }
              }
            }

            // Return results
            return {
              prs: Array.from(prNumbers),
              issues: Array.from(issueNumbers)
            };

      - name: Apply labels
        uses: actions/github-script@v6
        env:
          LABEL_NAME: "Released in ${{ github.ref_name }}"
        with:
          script: |
            const { owner, repo } = context.repo;
            const { prs, issues } = ${{ steps.get-items.outputs.result }};
            const labelName = process.env.LABEL_NAME;

            // Label PRs
            for (const prNumber of prs) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels: [labelName]
              });
            }

            // Label Issues
            for (const issueNumber of issues) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: issueNumber,
                labels: [labelName]
              });
            }

            console.log(`Labeled ${prs.length} PRs and ${issues.length} issues with ${labelName}`);
